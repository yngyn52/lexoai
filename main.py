import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
import asyncio
from difflib import SequenceMatcher

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
try:
    with open("data/qa_base.json", "r", encoding="utf-8") as f:
        qa_base = json.load(f)
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(qa_base)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    qa_base = []

load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

def calculate_similarity(a, b):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–µ–ø–µ–Ω—å —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫"""
    return SequenceMatcher(None, a, b).ratio()

def preprocess_text(text):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    return text.lower().strip().replace("?", "").replace(".", "").replace("!", "")

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "‚öñÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø LexoAI ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
        "1. /chat ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "2. /document ‚Äî –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    )

@dp.message(Command("help"))
async def help(message: types.Message):
    await message.answer(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "- –ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º (¬´–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã¬ª)\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /document –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π\n"
        "- –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ã —á–µ—Ä–µ–∑ /analyze"
    )

@dp.message(Command("chat"))
async def handle_chat(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")],
            [types.KeyboardButton(text="–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç–æ–≤–∞—Ä")],
            [types.KeyboardButton(text="–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –î–¢–ü –±–µ–∑ –ì–ò–ë–î–î")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤:",
        reply_markup=keyboard
    )

@dp.message()
async def handle_question(message: types.Message):
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    user_question = preprocess_text(message.text)
    
    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    best_match = None
    best_ratio = 0.4  # —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
    special_cases = {
        "–∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç–æ–≤–∞—Ä": [q for q in qa_base if "–≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏" in q["question"].lower() or "–≤–æ–∑–≤—Ä–∞—Ç" in q["question"].lower()],
        "–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥—Ç–ø –±–µ–∑ –≥–∏–±–¥–¥": [q for q in qa_base if "–¥—Ç–ø" in q["question"].lower() and "–≥–∏–¥–¥" in q["question"].lower()]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if user_question in special_cases:
        matches = special_cases[user_question]
        if matches:
            best_match = matches[0]
    
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —á–µ—Ä–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º
    if not best_match:
        for item in qa_base:
            base_question = preprocess_text(item["question"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–ø–µ–Ω—å —Å—Ö–æ–∂–µ—Å—Ç–∏
            ratio = calculate_similarity(user_question, base_question)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å
            if ratio > best_ratio:
                best_ratio = ratio
                best_match = item
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if not best_match:
        keywords = {
            "—É–≤–æ–ª–∏–ª–∏": [q for q in qa_base if "—É–≤–æ–ª–∏–ª–∏" in q["question"].lower()],
            "–≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏": [q for q in qa_base if "–≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏" in q["question"].lower() or "–≤–æ–∑–≤—Ä–∞—Ç" in q["question"].lower()],
            "–¥—Ç–ø": [q for q in qa_base if "–¥—Ç–ø" in q["question"].lower()],
            "–≥–∏–¥–¥": [q for q in qa_base if "–≥–∏–¥–¥" in q["question"].lower()]
        }
        
        for keyword, matches in keywords.items():
            if keyword in user_question and matches:
                best_match = matches[0]
                break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å
    if best_match:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"‚öñÔ∏è {best_match['answer']}\n\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if best_match["law_links"] and len(best_match["law_links"]) > 0:
            response += "üîó –ò—Å—Ç–æ—á–Ω–∏–∫: "
            for i, link in enumerate(best_match["law_links"], 1):
                response += f"\n{i}. {link}"
        
        await message.answer(
            response,
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
    await message.answer(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /document –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
