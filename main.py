import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
with open("data/qa_base.json", "r", encoding="utf-8") as f:
    qa_base = json.load(f)

load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "‚öñÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø LexoAI ‚Äî –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
        "1. /chat ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "2. /document ‚Äî –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
    )

@dp.message(Command("help"))
async def help(message: types.Message):
    await message.answer(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "- –ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º (¬´–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã¬ª)\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /document –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π\n"
        "- –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ã —á–µ—Ä–µ–∑ /analyze"
    )

@dp.message(Command("chat"))
async def handle_chat(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")],
            [types.KeyboardButton(text="–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ —Ç–æ–≤–∞—Ä")],
            [types.KeyboardButton(text="–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –î–¢–ü –±–µ–∑ –ì–ò–ë–î–î")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤:",
        reply_markup=keyboard
    )

@dp.message()
async def handle_question(message: types.Message):
    user_question = message.text.lower()
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    for item in qa_base:
        if item["question"].lower() in user_question:
            await message.answer(
                f"‚öñÔ∏è {item['answer']}\n\n"
                f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: –°—Ç–∞—Ç—å—è {item['answer'].split('—Å—Ç. ')[1].split(' ')[0]} –¢–ö –†–§",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
    await message.answer(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /document –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
